"use strict";
//{
var express = require('express');
var bodyParser = require('body-parser');
var _ = require('lodash');
var app = express();
app.use('/', express.static(__dirname+'../..'));
console.log(__dirname+'../..');
app.use('/rest', bodyParser.json());
app.use('/rest',bodyParser.urlencoded({extended: true}));     // to support URL-encoded bodies
app.listen(9000);
#set($parent = [])   
#set($ParentName = "")  
#set($depthInt = 0)
#set($oldDepthInt = 0)
#set($arrayToClose = [])
#set($entityToClose = [])
#set($lastEntityDepth = 0)
#set($entityNew = false)
var mongoose = require('mongoose'), Schema = mongoose.Schema
var mongoURI = "mongodb://localhost:27017/DBB";
var MongoDB = mongoose.connect(mongoURI).connection;
MongoDB.on('error', function(err) { console.log(err.message); });
MongoDB.once('open', function() {
  console.log("mongodb connection open");
});
/* For droping Database purpose
    mongoose.connection.db.dropDatabase();
*/
var db = mongoose.connection;
db.on('error', function (err) {
console.log('connection error', err);
});
db.once('open', function () {
console.log('connected.');
});






#set($memory = [])
#set($oldDepth = 0)
#set($memoryDepth = [])
#set($first = "nope")
#foreach($item in $structure)
#set($Depth = $depthInt.parseInt($item.get(4)))
#if($Depth > 1)
#if($item.get(0).equals("Entity"))
#if($Depth == 2)
#if($foreach.count > 2)
#set($distance = $memory.size() - 1)
#foreach($range in [0..$distance]) 
#set($lastMemInput = $memory.size() - 1)
#set($tempRange = $distance - $range)
#foreach($ran in [0..$tempRange])	#end${memory[$lastMemInput]}
#set($action = $memory.remove($lastMemInput))
#set($action = $memoryDepth.remove($lastMemInput))
#end
#end
var $item.get(1)Schema =  new Schema({
#set($action = $memory.add("});"))
#set($action = $memoryDepth.add($Depth))	
#else
#if($oldDepth < $Depth)
	
#foreach($range in [0..$Depth])	#end#if($first.equals("false")),#else #set($first = "false")#{end}"$item.get(1)" : [{
#set($action = $memory.add("}]"))	
#set($action = $memoryDepth.add($Depth))		
#else
#if($oldDepth == $Depth)
#set($lastMemInput = $memory.size() - 1)
#if($lastMemInput>=0 && $memoryDepth[$lastMemInput] == $Depth)
						
#foreach($range in [0..$Depth])	#end${memory[$lastMemInput]}
#set($action = $memory.remove($lastMemInput))
#set($action = $memoryDepth.remove($lastMemInput))
#end
#foreach($range in [0..$Depth])	#end#if($first.equals("false")),#else #set($first = "false")#{end}"$item.get(1)" : [{
#set($action = $memory.add("}]"))	
#set($action = $memoryDepth.add($Depth))
#set($countAccfermante=$countAccfermante+1)	
#else
#set($distance = $oldDepth - $Depth)
#foreach($range in [0..$distance])
#set($lastMemInput = $memory.size() - 1)

#set($tempRange = $distance - $range)
#foreach($ran in [0..$tempRange])	#end${memory[$lastMemInput]}
#set($action = $memory.remove($lastMemInput))
#set($action = $memoryDepth.remove($lastMemInput))
#end
#foreach($range in [0..$Depth])	#end#if($first.equals("false")),#else #set($first = "false")#{end}"$item.get(1)" : [{
#set($action = $memory.add("}]"))	
#set($action = $memoryDepth.add($Depth))
#set($countAccfermante=$countAccfermante+1)
#end
#end
#end
#set($first = "true")
#else

#foreach($range in [0..$Depth])	#end#if($first.equals("false")),#else #set($first = "false")#end#if($item.get(3).equals("true"))"$item.get(1)" : "array"#else"$item.get(1)" : "$item.get(2)"#end	
#end
#end
#set($oldDepth = $Depth)
#end
#set($distance = $memory.size() - 1)
#foreach($range in [0..$distance]) 
#set($lastMemInput = $memory.size() - 1)
#set($tempRange = $distance - $range)
#foreach($ran in [0..$tempRange])	#end${memory[$lastMemInput]}
#set($action = $memory.remove($lastMemInput))
#set($action = $memoryDepth.remove($lastMemInput))
#end







#set($oldDepth = 2) 
#foreach($item in $structure)
	#if($item.get(0).equals("Entity") && $depthInt.parseInt($item.get(4))>=2)
		#if($item.get(4)==2)
	#set($parent=[])
	#set($ParentName = "")
	#end
		#if($oldDepthInt.parseInt($oldDepth)<$depthInt.parseInt($item.get(4)))
		#set($xxx = $parent.add($ParentName))
	#end
	#if($oldDepthInt.parseInt($oldDepth)>$depthInt.parseInt($item.get(4)))
	#set($tempmax = $oldDepthInt.parseInt($oldDepth) - 1)
	#set($range = [$depthInt.parseInt($item.get(4))..$tempmax])
	#foreach($i in $range)
		
		#set($temp = $parent.size() - 1)
		#if($temp > 0)
			#set($xxx = $parent.remove($temp))
		#end
	#end
#end
		#set($oldDepth=$item.get(4))
		#set($ParentName=$item.get(1))
		#if($depthInt.parseInt($item.get(4))==2)
		#set($actualParent = $item.get(1))
		var ${actualParent}Builder = mongoose.model('${item.get(1)}',$item.get(1)Schema);
		var sample$item.get(1) = new ${actualParent}Builder({});
		#end
		
		app.get('/rest/#foreach($url in $parent)${url}/:${url}Id/#end${item.get(1)}', function(req,res)
		{
		${actualParent}Builder.find(		#if($parent.size() == 0){#else#foreach($url in $parent)#set($index = $foreach.count)#if($index.equals(1)){id : req.params.${url}Id#else,"#foreach($urlIn in $parent)#set($indexIn = $foreach.count)#set($temp = $index - 1)#if($index > 0 && !$urlIn.equals($parent.get(0)) && ${indexIn} <= $index)${urlIn}.#end#if($indexIn.equals($parent.size()))#set($temp = $index - 1)id" : 	req.params.${parent.get($temp)}Id#end#end#if($index == $parent.size())

		#end
		#end
		#end
		#end}
		).sort("id").exec(function(err, doc){
		console.log("GET :${item.get(1)} : ");
		console.log(doc#foreach($url in $parent)#if(!$url.equals($actualParent))[0].${url}#end#end#if(!$item.get(1).equals($actualParent))[0].${item.get(1)}#end);
		res.json(doc#foreach($url in $parent)#if(!$url.equals($actualParent))[0].${url}#end#end#if(!$item.get(1).equals($actualParent))[0].${item.get(1)}#end);
		
		});
		});
		
		app.get('/rest/#foreach($url in $parent)#set($zzz=${item.get(1)}) ${url}/:${url}Id/#end${item.get(1)}/:${item.get(1)}Id', function(req,res)
		{
		${actualParent}Builder.find( 
		#if($parent.size() == 0){id : req.params.${item.get(1)}Id#else#foreach($url in $parent)#set($index = $foreach.count)#if($index.equals(1)){id : req.params.${url}Id#else,"#foreach($urlIn in $parent)#set($indexIn = $foreach.count)#set($temp = $index - 1)#if($index > 0 && !$urlIn.equals($parent.get(0)) && ${indexIn} <= $index)${urlIn}.#end#if($indexIn.equals($parent.size()))#set($temp = $index - 1)id" : 	req.params.${parent.get($temp)}Id#end#end#if($index == $parent.size()),"#foreach($urlIn in $parent)#set($indexIn = $foreach.count)#set($temp = $index - 1)#if($index > 0 && !$urlIn.equals($parent.get(0)) && ${indexIn} <= $index)${urlIn}.#end#if($indexIn.equals($parent.size()))#set($temp = $index - 1)${item.get(1)}Id" :req.params.${item.get(1)}Id#end#end#end#end#end#end}
		  ,{${item.get(1)}:{$elemMatch:{"id": req.params.${item.get(1)}Id}}}
    ).sort("id").exec(function(err, doc){
            if(!err) {
                res.json(doc[0].${item.get(1)});
                console.log("GET2:");
		
		console.log(doc#foreach($url in $parent)#if(!$url.equals($actualParent))[0].${url}#end#end#if(!$item.get(1).equals($actualParent))[0].${item.get(1)}#end[0]);
		res.json(doc#foreach($url in $parent)#if(!$url.equals($actualParent))[0].${url}#end#end#if(!$item.get(1).equals($actualParent))[0].${item.get(1)}#end[0]);
		
            }
            else
            {
                console.log(err);
            }
        })
		
		});
		#if($parent.size() == 0)
		app.delete('/rest/#foreach($url in $parent)${url}/:${url}Id/#end${item.get(1)}/:${item.get(1)}Id', function(req, res)
		{
		${actualParent}Builder.remove(#if($parent.size() == 0){id : req.params.${item.get(1)}Id#else#foreach($url in $parent)#set($index = $foreach.count)#if($index.equals(1)){id : req.params.${url}Id#else,"#foreach($urlIn in $parent)#set($indexIn = $foreach.count)#set($temp = $index - 1)#if($index > 0 && !$urlIn.equals($parent.get(0)) && ${indexIn} <= $index)${urlIn}.#end#if($indexIn.equals($parent.size()))#set($temp = $index - 1)id" : 	req.params.${parent.get($temp)}Id#end#end#if($index == $parent.size()),"#foreach($urlIn in $parent)#set($indexIn = $foreach.count)#set($temp = $index - 1)#if($index > 0 && !$urlIn.equals($parent.get(0)) && ${indexIn} <= $index)${urlIn}.#end#if($indexIn.equals($parent.size()))#set($temp = $index - 1)${item.get(1)}Id" :req.params.${item.get(1)}Id#end#end#end#end#end#end}
		, function(err, doc){
		        if (!err) {
            console.log('deleted');
            var xxx = ${actualParent}Builder.update({id : {$gt : req.params.${item.get(1)}Id}},
           {$inc: { id: -1 } }, { multi: 1 }, function(err, data) {
                if (err) throw err;

                console.log(data);
            });
           
		res.send("deleted");
        } else {
            console.log(err);
        }
		});
		});
		#else
				app.delete('/rest/#foreach($url in $parent)${url}/:${url}Id/#end${item.get(1)}/:${item.get(1)}Id', function(req, res)
		{
		${actualParent}Builder.find(#foreach($url in $parent)#set($index = $foreach.count)#if($index.equals(1)){id : req.params.${url}Id#else,"#foreach($urlIn in $parent)#set($indexIn = $foreach.count)#set($temp = $index - 1)#if($index > 0 && !$urlIn.equals($parent.get(0)) && ${indexIn} <= $index)${urlIn}.#end#if($indexIn.equals($parent.size()))#set($temp = $index - 1)id":req.params.${parent.get($temp)}Id#end#end#end#end}
		 , function(err, doc){
                    
                    doc[0].${item.get(1)}.splice([req.params.questionId],1);
                    for (var i =0; i<doc[0].${item.get(1)}.length; i++)
                    {
                        doc[0].${item.get(1)}[i].id = i;
                    }
                    ${actualParent}Builder.update({id:req.params.${item.get(1)}Id},
                        {id:req.params.${item.get(1)}Id,
                            Titre:doc[0].Titre,
                            ${item.get(1)}:doc[0].${item.get(1)}}, function(err, doc)
                        {
                            if(!err)
                            res.json("");
                            else
                            res.json(err);
                        })
                })
		});
		#end

		
		
		#set($indNiveau=0)
		 app.post('/rest/#foreach($url in $parent)#set($indNiveau = $foreach.count)${url}/:${url}Id/#end${item.get(1)}', function(req, res)
  {
   var resulCount;
  ${actualParent}Builder.find(#if($parent.size() == 0){#else#foreach($url in $parent)#set($index = $foreach.count)#if($index.equals(1)){id : req.params.${url}Id#else,"#foreach($urlIn in $parent)#set($indexIn = $foreach.count)#set($temp = $index - 1)#if($index > 0 && !$urlIn.equals($parent.get(0)) && ${indexIn} <= $index)${urlIn}.#end#if($indexIn.equals($parent.size()))#set($temp = $index - 1)id" : 	req.params.${parent.get($temp)}Id#end#end#if($index == $parent.size())

		#end
		#end
		#end
		#end
		} , function(err, doc){
		
		if(doc[0])
			if("${item.get(1)}" != "${actualParent}")
				if(doc[0].${item.get(1)})
		            resulCount = doc[0].${item.get(1)}.length;
		        else
		        	resulCount = 1;
	       	else
	       		resulCount= doc.length;
	    else
	    	resulCount = doc.length;
              
  #if($indNiveau==0)
  //test Post Premier Niveau
     ${actualParent}Builder.create(
        {
  #set($inside = false)
  #foreach($attribute in $structure)
   #if($attribute.get(1).equals($item.get(1)))
    #set($inside = true)
    #set($first = true)
   #else
    #if($attribute.get(0).equals("Entity") && $attribute.get(4) == 2)
     #set($inside = false)
    #end
   #end
   #if($inside && $attribute.get(4) == 2 || ($inside && $attribute.get(4) == 3 && $attribute.get(0).equals("Entity")))
    #if(!$attribute.get(1).equals($item.get(1)))
     #if(!$first),#else #set($first = false) #end
    	 	#if($attribute.get(1).equals("id"))
     	 ${attribute.get(1)}:resulCount++
     	#else
     ${attribute.get(1)}:req.body.${attribute.get(1)}
     #end
    #end
   #end
  #end
  },function (err, data) {
  if (err){ console.log(err);}
  else 
  {console.log('Created: $item.get(1)', data);
  res.send("${item.get(1)} created:"+data);
  }
  });
  #else
  //$indNiveau
 //Les autres niveaux
  ${actualParent}Builder.update(
        #if($parent.size() == 0)
	        {id : req.params.${item.get(1)}Id
	        #else
	        #foreach($url in $parent)
	        	#set($index = $foreach.count)
	        	#if($index.equals(1))
	        		{id : req.params.${url}Id
	        	#else,"#foreach($urlIn in $parent)#set($indexIn = $foreach.count)#set($temp = $index - 1)#if($index > 0 && !$urlIn.equals($parent.get(0)) && ${indexIn} <= $index)${urlIn}.#end
	        		#if($indexIn.equals($parent.size()))#set($temp = $index - 1)id" : 	req.params.${parent.get($temp)}Id
	        		#end
	        	#end
	        	#if($index == $parent.size()),"#foreach($urlIn in $parent)
	        			#set($indexIn = $foreach.count)
	        			#set($temp = $index - 1)
	        			#if($index > 0 && !$urlIn.equals($parent.get(0)) && ${indexIn} <= $index)${urlIn}.#end
	        			#if($indexIn.equals($parent.size()))
	        				#set($temp = $index - 1)
	        				${item.get(1)}Id" :req.params.${item.get(1)}Id
        				#end
        			#end
        		#end
        	#end
        #end
        #end
        },
        {$addToSet:{${item.get(1)}:{
        id:resulCount

		}}},function (err, data) 
			{
		if (err){
			 console.log(err);
			 	}
		else 
				{
				console.log('Created: $item.get(1)', data);
				res.send("${item.get(1)} created:"+data);
				}
			}
		  
		)
		#end
  });
  });
  
  
		//
			app.post('/rest/#foreach($url in $parent)${url}/:${url}Id/#end${item.get(1)}/:${item.get(1)}Id', function(req, res)
		{
    	${actualParent}Builder.update(#if($parent.size() == 0){id : req.params.${item.get(1)}Id#else#foreach($url in $parent)#set($index = $foreach.count)#if($index.equals(1)){id : req.params.${url}Id#else,"#foreach($urlIn in $parent)#set($indexIn = $foreach.count)#set($temp = $index - 1)#if($index > 0 && !$urlIn.equals($parent.get(0)) && ${indexIn} <= $index)${urlIn}.#end#if($indexIn.equals($parent.size()))#set($temp = $index - 1)id" : 	req.params.${parent.get($temp)}Id#end#end#if($index == $parent.size()),"#foreach($urlIn in $parent)#set($indexIn = $foreach.count)#set($temp = $index - 1)#if($index > 0 && !$urlIn.equals($parent.get(0)) && ${indexIn} <= $index)${urlIn}.#end#if($indexIn.equals($parent.size()))#set($temp = $index - 1)${item.get(1)}Id" :req.params.${item.get(1)}Id#end#end#end#end#end#end}
		,
        {
		#set($inside = false)
		#foreach($attribute in $structure)
			#if($attribute.get(1).equals($item.get(1)))
				#set($inside = true)
				#set($first = true)
			#else
				#if($attribute.get(0).equals("Entity") && $attribute.get(4) == 2)
					#set($inside = false)
				#end
			#end
			#if($inside && $attribute.get(4) == 2 || ($inside && $attribute.get(4) == 3 && $attribute.get(0).equals("Entity")))
				#if(!$attribute.get(1).equals($item.get(1)))
					#if(!$first),#else #set($first = false) #end
					#if($attribute.get(1).equals("id"))
					${attribute.get(1)}:req.params.${item.get(1)}Id
					#else
					${attribute.get(1)}:req.body.${attribute.get(1)}
					#end
				#end
			#end
		#end
		},function (err, data) {
		if (err){ console.log(err);}
		else 
		{console.log('Updated: $item.get(1)', data);
		res.send("${item.get(1)} Updated:"+data);
		}
		});			
		});	
	#end
#end


console.log("Server Lanc� sur localhost:9000/");
//}
